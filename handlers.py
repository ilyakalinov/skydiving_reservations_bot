from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from config import *
from database import data, save_data
from utils import (
    generate_month_calendar,
    create_calendar_keyboard,
    get_available_months
)
from datetime import datetime
import re

CHECK_EXISTING, CONFIRM_OVERRIDE = range(14, 16)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü™Ç –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä—ã–∂–∫–∏ —Å –ø–∞—Ä–∞—à—é—Ç–æ–º!\n"
        "üìÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/schedule - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n"
        "/mybookings - –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏"
    )

async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bookings = []
    
    # –ü–æ–∏—Å–∫ –±—Ä–æ–Ω–µ–π –≤–æ –≤—Å–µ—Ö –¥–∞—Ç–∞—Ö
    for date_str, bookings_list in data["confirmed_bookings"].items():
        for booking in bookings_list:
            if booking["user_id"] == user_id:
                bookings.append({
                    "date": date_str,
                    "time": booking.get("time", "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                })
    
    if not bookings:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return
    
    text = "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏:\n\n"
    for idx, booking in enumerate(bookings, 1):
        text += f"{idx}. {booking['date']} ({booking['time']})\n"
    
    keyboard = [
        [InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å #{idx+1}", callback_data=f"cancel_booking:{booking['date']}:{user_id}")]
        for idx, booking in enumerate(bookings)
    ]
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ callback_data
    parts = query.data.split(":")
    if len(parts) != 3 or parts[0] != "cancel_booking":
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return
    
    _, date_str, user_id_str = parts
    user_id = int(user_id_str)
    
    if update.effective_user.id != user_id:
        await query.edit_message_text("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –±—Ä–æ–Ω—å!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏
    if date_str not in data["confirmed_bookings"]:
        await query.edit_message_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
    data["confirmed_bookings"][date_str] = [
        b for b in data["confirmed_bookings"][date_str]
        if b["user_id"] != user_id
    ]
    
    # –£–¥–∞–ª—è–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ—Ç –±—Ä–æ–Ω–µ–π
    if not data["confirmed_bookings"][date_str]:
        del data["confirmed_bookings"][date_str]
    
    save_data()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await context.bot.send_message(
        ADMIN_ID,
        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω—å –Ω–∞ {date_str}"
    )
    
    await query.edit_message_text("‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ.")


async def check_existing_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    selected_date = context.user_data["booking_date"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏
    existing = any(
        booking["user_id"] == user_id
        for booking in data["confirmed_bookings"].get(selected_date, [])
    )
    
    if existing:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data="confirm_override")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_override")]
        ]
        await update.message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHECK_EXISTING
    else:
        return await get_first_name(update, context)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
    if update.effective_user.id == ADMIN_ID:
        text += "\n/settings - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
    await update.message.reply_text(text)


async def schedule_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    available_months = get_available_months()
    if not available_months:
        await update.message.reply_text("‚ùå –ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç")
        return
    
    buttons = []
    for year, month in available_months:
        month_name = datetime(year, month, 1).strftime("%B %Y")
        buttons.append(InlineKeyboardButton(month_name, callback_data=f"month:{year}:{month}"))
    
    keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_month_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        _, year_str, month_str = query.data.split(":")
        year = int(year_str)
        month = int(month_str)
        
        schedule = generate_month_calendar(year, month)
        if not schedule:
            await query.edit_message_text("‚ùå –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π")
            return
        
        keyboard = create_calendar_keyboard(schedule, mode="booking")
        await query.edit_message_text(
            f"üóìÔ∏è {datetime(year, month, 1).strftime('%B %Y')}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏:",
            reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_date = query.data.split(":")[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    context.user_data["booking_date"] = selected_date

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–æ–Ω–∏ –¢–û–õ–¨–ö–û –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    user_id = update.effective_user.id
    existing = any(
        booking["user_id"] == user_id
        for booking in data["confirmed_bookings"].get(selected_date, [])
    )

    if existing:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data="confirm_override")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_override")]
        ]
        await query.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHECK_EXISTING
    else:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return GET_FIRST_NAME

async def get_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["first_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
    return GET_LAST_NAME

async def get_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["last_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    return GET_AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if not 18 <= age <= 100: raise ValueError
        context.user_data["age"] = age
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):")
        return GET_WEIGHT
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 100")
        return GET_AGE

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if not 40 <= weight <= 150: raise ValueError
        context.user_data["weight"] = weight
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return GET_PHONE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 40 –¥–æ 150")
        return GET_WEIGHT

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if not re.match(r'^\+?[1-9]\d{9,14}$', phone):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return GET_PHONE
    
    booking = {
        **context.user_data,
        "user_id": update.effective_user.id,
        "phone": phone
    }
    date = context.user_data["booking_date"]
    data["pending_bookings"].setdefault(date, []).append(booking)
    save_data()
    
    await context.bot.send_message(
        ADMIN_ID,
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ {date}:\n" + "\n".join(f"{k}: {v}" for k, v in booking.items()),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{date}_{update.effective_user.id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{date}_{update.effective_user.id}")]
        ])
    )
    
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
    return ConversationHandler.END

async def finalize_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    booking = context.user_data.get("current_booking")
    date = context.user_data.get("original_date")
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    booking_time = context.user_data.get("booking_time", "")
    
    if not booking or not date:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
    if booking_time:
        booking["time"] = booking_time
        date_message = f"{date} –≤ {booking_time}"
    else:
        date_message = date
    
    data["confirmed_bookings"].setdefault(date, []).append(booking)
    if date in data["pending_bookings"]:
        data["pending_bookings"][date] = [
            b for b in data["pending_bookings"][date] 
            if b["user_id"] != booking["user_id"]
        ]
    save_data()
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
    await context.bot.send_message(
        booking["user_id"],
        "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date_message}\n"
        "üìç –ê—ç—Ä–æ–¥—Ä–æ–º '–°–æ–∫–æ–ª'\n"
        "–ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç –∏ –º–µ–¥. —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

async def handle_override(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_override":
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±—Ä–æ–Ω—å
        user_id = update.effective_user.id
        selected_date = context.user_data["booking_date"]
        data["confirmed_bookings"][selected_date] = [
            b for b in data["confirmed_bookings"].get(selected_date, [])
            if b["user_id"] != user_id
        ]
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return GET_FIRST_NAME
    else:
        await query.edit_message_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return ConversationHandler.END