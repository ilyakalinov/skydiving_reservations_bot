from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from config import *
from database import data, save_data
from utils import generate_schedule, is_date_available, show_month_selector, show_days_selector
from datetime import datetime
import re

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü™Ç –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä—ã–∂–∫–∏ —Å –ø–∞—Ä–∞—à—é—Ç–æ–º!\n"
        "üìÖ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/schedule ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/book ‚Äî –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä—ã–∂–æ–∫\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/schedule ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/book ‚Äî –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä—ã–∂–æ–∫\n"
        "/view_bookings ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π (–∞–¥–º–∏–Ω)\n"
        "/settings ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–¥–º–∏–Ω)\n"
        "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(text)

async def schedule_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().date()
    buttons = []
    for i in range(data["settings"]["months_ahead"]):
        year = today.year + (today.month + i - 1) // 12
        month = (today.month + i) % 12 or 12
        month_name = datetime(year, month, 1).strftime("%B %Y")
        buttons.append(InlineKeyboardButton(month_name, callback_data=f"month:{year}:{month}"))
    
    keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_month_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, year_str, month_str = query.data.split(":")
    schedule = generate_schedule(int(year_str), int(month_str))
    
    text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n" + "\n".join(
        f"{date} ‚Äî {slots} –º–µ—Å—Ç" for date, slots in schedule.items()
    )
    await query.edit_message_text(text)

async def book_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = generate_schedule()
    keyboard = [
        [InlineKeyboardButton(f"{date} ({slots})", callback_data=f"book:{date}")]
        for date, slots in schedule.items()
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["booking_date"] = query.data.split(":")[1]
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return GET_FIRST_NAME

async def get_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["first_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
    return GET_LAST_NAME

async def get_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["last_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    return GET_AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if not 18 <= age <= 100:
            raise ValueError
        context.user_data["age"] = age
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):")
        return GET_WEIGHT
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 100")
        return GET_AGE

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text)
        if not 40 <= weight <= 150:
            raise ValueError
        context.user_data["weight"] = weight
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return GET_PHONE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 40 –¥–æ 150")
        return GET_WEIGHT

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if not re.match(r'^\+?[1-9]\d{9,14}$', phone):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return GET_PHONE
    
    booking = {
        **context.user_data,
        "user_id": update.effective_user.id,
        "phone": phone
    }
    date = context.user_data["booking_date"]
    data["pending_bookings"].setdefault(date, []).append(booking)
    save_data()
    
    await context.bot.send_message(
        ADMIN_ID,
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ {date}:\n" + "\n".join(f"{k}: {v}" for k, v in booking.items()),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{date}_{update.effective_user.id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{date}_{update.effective_user.id}")]
        ])
    )
    
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
    return ConversationHandler.END

async def view_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    text = "‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n"
    for date, bookings in data["pending_bookings"].items():
        text += f"{date}:\n" + "\n".join(f"- {b['first_name']} {b['last_name']}" for b in bookings) + "\n\n"
    
    text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ:\n"
    for date, bookings in data["confirmed_bookings"].items():
        text += f"{date}:\n" + "\n".join(f"- {b['first_name']} {b['last_name']}" for b in bookings) + "\n\n"
    
    await update.message.reply_text(text)

async def finalize_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    booking = context.user_data["booking"]
    date = context.user_data["date"]
    data["confirmed_bookings"].setdefault(date, []).append(booking)
    data["pending_bookings"][date] = [b for b in data["pending_bookings"][date] if b["user_id"] != booking["user_id"]]
    save_data()
    
    await context.bot.send_message(
        booking["user_id"],
        "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        "üìç –ê—ç—Ä–æ–¥—Ä–æ–º '–°–æ–∫–æ–ª'\n"
        "–ü—Ä–∏ —Å–µ–±–µ –∏–º–µ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç –∏ –º–µ–¥. —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    return ConversationHandler.END